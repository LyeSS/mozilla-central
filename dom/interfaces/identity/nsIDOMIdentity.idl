/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "domstubs.idl"

[scriptable, function, uuid(b709aa1c-ffd7-473d-b07e-4269fee0ba67)]
interface nsIDOMIdentityCallback : nsISupports
{
  void handleEvent();
};

[scriptable, function, uuid(20c6ffa0-3469-4262-bdd5-adc0f686b3f1)]
interface nsIDOMIdentityRPLoginCallback : nsISupports
{
  void handleEvent(in DOMString assertion);
};

[scriptable, function, uuid(6070c8ce-acf3-11e1-8a5f-000c295c4dc0)]
interface nsIDOMIdentityKeypairCallback : nsISupports
{
  void onSuccess(in jsval pubkey); // TODO: decide on object or string
};

[scriptable, function, uuid(65f1b6fb-acab-43af-97b9-825fb442c02d)]
interface nsIDOMIdentityBeginProvisioningCallback : nsISupports
{
  void onBeginProvisioning(in DOMString email, in unsigned long certDuration);
};

[scriptable, function, uuid(6ebc0c63-b634-478c-ab47-12cf8400c120)]
interface nsIDOMIdentityBeginAuthenticationCallback : nsISupports
{
  void onBeginAuthentication(in DOMString email);
};

[scriptable, uuid(fd2b29a0-b2b3-11e1-afa6-0800200c9a66)]
interface nsIDOMIdentityRPWatchOptions : nsISupports
{
  /**
   *  Called when the user has chosen to login to the site and the corresponding
   *  assertion is obtained. The site should proceed to verify this assertion on
   *  their servers and start the user session.
   */
  readonly attribute nsIDOMIdentityRPLoginCallback onlogin;

  /**
   *  Called when the user has chosen to logout of the site. The current
   *  session must be cleared.
   */
  readonly attribute nsIDOMIdentityCallback onlogout;

  /**
   *  (optional) If "loggedInEmail" is non-null, this callback indicates that the user
   *  specified by that argument is already signed in and that the site may
   *  retain the existing user session.
   */
  readonly attribute nsIDOMIdentityCallback onready;

  /**
   *  If there is an active session with the site, the caller must populate
   *  this field with the user identifier. May be null if there is no user
   *  logged in to the site at the time of calling watch()
   */
  readonly attribute DOMString loggedInEmail;
};

[scriptable, uuid(a5df9c40-b2b7-11e1-afa6-0800200c9a66)]
interface nsIDOMIdentityRPRequestOptions : nsISupports
{
  /**
   * (optional) a callback that will be invoked if the user refuses to share an
   * identity with the site.
   */
  readonly attribute nsIDOMIdentityCallback oncancel;

  /**
   * (optional) An email address that the user must use to log in. When
   * provided, the user may not select a different address, but may cancel
   * the sign-in.
   */
  readonly attribute DOMString requiredEmail;

  /**
   * (optional) URL to site's privacy policy. When provided, a link will be
   * displayed in the sign-in dialog.
   */
  readonly attribute DOMString privacyPolicy;

  /**
   * (optional) URL to site's terms of service. When provided, a link will be
   * displayed in the sign-in dialog.
   */
  readonly attribute DOMString termsOfService;
};

[scriptable, uuid(2f744abf-e017-4801-b1cb-5d28d0ae3a3e)]
interface nsIDOMIdentity : nsISupports
{
  /*
   * Relying Party (RP) APIs
   */

  /**
   * Register a set of callbacks which will notify the calling page on
   * events like login and logout.
   */
  void watch(in nsIDOMIdentityRPWatchOptions options);

  /**
   * Request the user to sign in to the calling site. This will result in
   * UI that will require user action. When an assertion is successfully
   * obtained, the onlogin callback as registered via a preceiding call to
   * watch() will be invoked.
   */
  void request([optional] in nsIDOMIdentityRPRequestOptions options);

  /**
   * Invoked when a user wishes to logout of the current site
   */
  void logout();

  /*
   *  Identity Provider (IDP) APIs
   */

  // provisioning
  void beginProvisioning(in nsIDOMIdentityBeginProvisioningCallback callback);
  void genKeyPair(in nsIDOMIdentityKeypairCallback callback);
  void registerCertificate(in DOMString certificate);
  void raiseProvisioningFailure(in DOMString reason);

  // authentication
  void beginAuthentication(in nsIDOMIdentityBeginAuthenticationCallback callback);
  void completeAuthentication();
  void raiseAuthenticationFailure(in DOMString reason);
};

