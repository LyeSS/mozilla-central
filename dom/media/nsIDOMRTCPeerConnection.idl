/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsIDOMMediaStream.idl"

interface nsIDOMEventListener;
interface nsIDOMDataChannel;

/* Quick hack */
[scriptable, function, uuid(eb9c563c-3b09-4565-9317-eca96ae0c538)]
interface RTCPeerConnectionCallback : nsISupports
{
  void onCallback(in jsval value);
};

[scriptable, function, uuid(55546efd-287b-4460-8283-0592875b890f)]
interface RTCPeerConnectionCallbackVoid : nsISupports
{
  void onCallback();
};

[scriptable, uuid(c08575b6-7e82-4c5a-bbc5-dde755c35788)]
interface RTCSessionDescription : nsISupports
{
  attribute string sdp;
  attribute string type;
};

/* See http://dev.w3.org/2011/webrtc/editor/webrtc.html */
[scriptable, uuid(94628e70-e96f-4170-871c-f993a49f065a)]
interface nsIDOMRTCPeerConnection : nsISupports
{
  void createOffer(in RTCPeerConnectionCallback successCallback,
    [optional] in RTCPeerConnectionCallback failureCallback,
    [optional] in jsval constraints);

  void createAnswer(in RTCSessionDescription offer,
    in RTCPeerConnectionCallback successCallback,
    [optional] in RTCPeerConnectionCallback failureCallback,
    [optional] in jsval constraints,
    [optional] in bool createProvisionalAnswer);

  void setLocalDescription(in RTCSessionDescription desc,
    [optional] in RTCPeerConnectionCallback successCallback,
    [optional] in RTCPeerConnectionCallback failureCallback);

  void setRemoteDescription(in RTCSessionDescription desc,
    [optional] in RTCPeerConnectionCallback successCallback,
    [optional] in RTCPeerConnectionCallback failureCallback);

  void updateIce([optional] in jsval configuration,
    [optional] in jsval constraints,
    [optional] in bool restart);

  void addIceCandidate(in jsval candidate);

  void addStream(in nsIDOMMediaStream stream,
    [optional] in jsval constraints);

  void removeStream(in nsIDOMMediaStream stream);
  void close();

  /* Identity */
  void selectIdentity(in RTCPeerConnectionCallback successCallback,
    [optional] in RTCPeerConnectionCallback failureCallback);

  void verifyIdentity(in jsval offer,
    in RTCPeerConnectionCallback successCallback,
    in RTCPeerConnectionCallback failureCallback);

  /* Data channel */
  nsIDOMDataChannel createDataChannel();

  /* XXX remove these */
  void listen(in unsigned short port);
  void connect(in DOMString addr, in unsigned short port);

  attribute RTCPeerConnectionCallbackVoid onConnection;
  attribute RTCPeerConnectionCallbackVoid onClosedConnection;
  attribute RTCPeerConnectionCallback onDataChannel;

  readonly attribute DOMString iceState;
  readonly attribute DOMString readyState;
  readonly attribute jsval localDescription;
  readonly attribute jsval remoteDescription;

  readonly attribute jsval localStreams; // MediaStream[]
  readonly attribute jsval remoteStreams; // MediaStream[]

  /* TODO: Use real EventTarget */
  attribute RTCPeerConnectionCallback onRemoteStreamAdded;

  /* For testing only! Please remove later */
  nsIDOMMediaStream createFakeMediaStream(in string type,
                                          [optional] in boolean mute
                                          );
};
