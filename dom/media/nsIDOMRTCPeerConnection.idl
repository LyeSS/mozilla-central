/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsIDOMMediaStream.idl"

interface nsIDOMEventListener;
interface nsIDOMDataChannel;

[scriptable, function, uuid(eb9c563c-3b09-4565-9317-eca96ae0c538)]
interface RTCPeerConnectionCallback : nsISupports
{
  void onCallback(in jsval value);
};

[scriptable, function, uuid(55546efd-287b-4460-8283-0592875b890f)]
interface RTCPeerConnectionCallbackVoid : nsISupports
{
  void onCallback();
};

[scriptable, uuid(05d7375e-b024-4951-a570-c6642105ad35)]
interface nsIDOMRTCSessionDescription : nsISupports
{
  attribute DOMString sdp;
  attribute DOMString type;
};

[scriptable, uuid(df176474-e20a-4f42-a85b-b0414d634cf0)]
interface nsIDOMRTCIceCandidate : nsISupports
{
  attribute DOMString candidate;
  attribute DOMString sdpMid;
  attribute unsigned short sdpMLineIndex;
};

/* If either maxRetransmitTime or maxRetransmitNum are set, it's
   unreliable, else it's a reliable channel.  If both are set it's an
   error.  outOfOrderAllowed can be used with any type of channel.  The
   equivalent of UDP is { outOfOrderAllowed: true, maxRetransmitNum: 0 }.
   The TCP equivalent is {}. */
dictionary DataChannelInit {
  boolean outOfOrderAllowed;
  unsigned short maxRetransmitTime;
  unsigned short maxRetransmitNum;
};

/* See http://dev.w3.org/2011/webrtc/editor/webrtc.html */
[scriptable, uuid(94628e70-e96f-4170-871c-f993a49f065a)]
interface nsIDOMRTCPeerConnection : nsISupports
{
  void createOffer(in RTCPeerConnectionCallback successCallback,
    [optional] in RTCPeerConnectionCallback failureCallback,
    [optional] in jsval constraints);

  void createAnswer(in nsIDOMRTCSessionDescription offer,
    in RTCPeerConnectionCallback successCallback,
    [optional] in RTCPeerConnectionCallback failureCallback,
    [optional] in jsval constraints,
    [optional] in bool createProvisionalAnswer);

  void setLocalDescription(in nsIDOMRTCSessionDescription desc,
    [optional] in RTCPeerConnectionCallback successCallback,
    [optional] in RTCPeerConnectionCallback failureCallback);

  void setRemoteDescription(in nsIDOMRTCSessionDescription desc,
    [optional] in RTCPeerConnectionCallback successCallback,
    [optional] in RTCPeerConnectionCallback failureCallback);

  void updateIce([optional] in jsval configuration,
    [optional] in jsval constraints,
    [optional] in bool restart);

  void addIceCandidate(in nsIDOMRTCIceCandidate candidate);

  void addStream(in nsIDOMMediaStream stream,
    [optional] in jsval constraints);

  void removeStream(in nsIDOMMediaStream stream);
  void close();

  /* Readonly attributes */
  readonly attribute DOMString iceState;
  readonly attribute DOMString iceGatheringState;

  readonly attribute DOMString readyState;
  readonly attribute jsval localDescription;
  readonly attribute jsval remoteDescription;

  readonly attribute jsval localStreams; // MediaStream[]
  readonly attribute jsval remoteStreams; // MediaStream[]

  /* Event handlers. TODO: Use real EventTarget */
  attribute RTCPeerConnectionCallback onaddstream;
  attribute RTCPeerConnectionCallback onremovestream;
  attribute RTCPeerConnectionCallback onicecandidate;
  attribute RTCPeerConnectionCallback onstatechange;
  attribute RTCPeerConnectionCallback ongatheringchange;
  attribute RTCPeerConnectionCallback onicechange;

  /* Identity */
  void selectIdentity(in RTCPeerConnectionCallback successCallback,
    [optional] in RTCPeerConnectionCallback failureCallback);

  void verifyIdentity(in jsval offer,
    in RTCPeerConnectionCallback successCallback,
    in RTCPeerConnectionCallback failureCallback);

  /* Data channel */
  nsIDOMDataChannel createDataChannel([optional] in ACString label,
                                      /* DataChannelInit */ [optional] in jsval options);
  attribute RTCPeerConnectionCallbackVoid onConnection;
  attribute RTCPeerConnectionCallbackVoid onClosedConnection;
  attribute RTCPeerConnectionCallback onDataChannel;

  /* For purposes only! Remove in production */
  nsIDOMMediaStream createFakeMediaStream(in string type,
                                          [optional] in boolean mute
                                          );

  /* Bring up SCTP/DTLS/UDP connection */
  /* XXX remove */
  void connectDataConnection(in unsigned short localport, in unsigned short remoteport,
                             [optional] in unsigned short numstreams);
  void listen(in unsigned short port, [optional] in unsigned short numstreams);
  void connect(in DOMString addr, in unsigned short localport, in unsigned short remoteport,
               [optional] in unsigned short numstreams);
};
