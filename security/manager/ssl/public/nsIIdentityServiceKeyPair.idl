/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsIURI.idl"

interface nsIIdentityServiceKeyGenCallback;

/**
 * nsIIdentityServiceKeyPair
 * This interface provides a keypair and signing interface for Identity functionality
 */
[scriptable, uuid(73962dc7-8ee7-4346-a12b-b039e1d9b54d)]
interface nsIIdentityServiceKeyPair : nsISupports
{
  void generateKeyPair(in unsigned long aAlgorithm, in nsIIdentityServiceKeyGenCallback aCallback);

  readonly attribute AUTF8String keyType; 

  readonly attribute AUTF8String encodedPublicKey;
  
  // RSA properties, may be NULL
  readonly attribute AUTF8String encodedRSAPublicKeyExponent;
  
  readonly attribute AUTF8String encodedRSAPublicKeyModulus;

  // DSA properties, may be NULL
  readonly attribute AUTF8String encodedDSAGenerator;

  readonly attribute AUTF8String encodedDSAPrime;

  readonly attribute AUTF8String encodedDSASubPrime;
 
  AUTF8String sign(in AUTF8String aText);

  AUTF8String verify(in AUTF8String aSignature, in AUTF8String encodedPublicKey);

  // Algorithm constants

  const unsigned long ALG_RSA   = 1;

  const unsigned long ALG_DSA   = 2;
};

/**
 * nsIIdentityServiceKeyGenCallback
 * This interface provides a JavaScript callback object used to collect the 
 * nsIIdentityServeKeyPair when the keygen operation is complete 
 */
[scriptable, uuid(f38100a5-94f1-415c-ac05-7e8351345dec)]
interface nsIIdentityServiceKeyGenCallback : nsISupports
{
  // keyPair may be null if keypair generation failed.
  void keyPairGenFinished(in nsIIdentityServiceKeyPair keyPair);
};
